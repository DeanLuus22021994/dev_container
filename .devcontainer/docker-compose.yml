version: '3.8'

x-service-common: &service-common
  restart: unless-stopped
  logging:
    driver: 'json-file'
    options:
      max-size: '50m'
      max-file: '10'
  # All services use the central .env file
  env_file:
    - ../.env

x-db-common: &db-common
  <<: *service-common
  healthcheck:
    interval: 10s
    timeout: 5s
    retries: 5

services:
  app:
    <<: *service-common
    image: deanluus22021994/cloudbuild:latest
    # No build context needed since using prebuilt image
    volumes:
      - ..:/workspace:cached
      - /var/run/docker.sock:/var/run/docker.sock
      - ~/.cache/yarn:/home/vscode/.cache/yarn
    command: sleep infinity
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongo:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - dev-network

  # Database services
  postgres:
    <<: *db-common
    image: postgres:16-alpine
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    ports:
      - '5432:5432'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
    networks:
      - dev-network

  redis:
    <<: *db-common
    image: redis:7-alpine
    volumes:
      - redis-data:/data
    ports:
      - '6379:6379'
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
    networks:
      - dev-network

  mongo:
    <<: *db-common
    image: mongo:6
    volumes:
      - mongo-data:/data/db
    ports:
      - '27017:27017'
    healthcheck:
      test: ['CMD', 'mongosh', '--eval', "db.adminCommand('ping')"]
    networks:
      - dev-network

  elasticsearch:
    <<: *db-common
    image: elasticsearch:8.9.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - 'ES_JAVA_OPTS=-Xms512m -Xmx512m'
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - '9200:9200'
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9200']
    networks:
      - dev-network

  rabbitmq:
    <<: *db-common
    image: rabbitmq:3-management
    ports:
      - '5672:5672'
      - '15672:15672'
    healthcheck:
      test: ['CMD', 'rabbitmq-diagnostics', 'ping']
    networks:
      - dev-network

networks:
  dev-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  mongo-data:
  elasticsearch-data:
  node_modules:
  venv:
