name: Localized Development Setup

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to set up"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - stage
          - prod
      debugMode:
        description: "Enable debug mode"
        required: false
        default: false
        type: boolean

jobs:
  setup-environment:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up environment variables
        run: |
          echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          echo "DEBUG_MODE=${{ github.event.inputs.debugMode }}" >> $GITHUB_ENV

      - name: Cache development dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ~/.vscode-insiders
            node_modules
            .devcontainer/.cache
          key: ${{ runner.os }}-devenv-${{ hashFiles('**/package-lock.json', '**/devcontainer.json') }}
          restore-keys: |
            ${{ runner.os }}-devenv-

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16.x"
          cache: "npm"

      - name: Install global dependencies
        run: |
          npm install -g @vscode/vsce yo generator-code @vscode/test-electron

      - name: Set up VS Code Insiders
        uses: GabrielBB/xvfb-action@v1
        with:
          run: |
            mkdir -p ~/.vscode-insiders
            if [ "${{ runner.os }}" == "Linux" ]; then
              wget -O vscode-insiders.tar.gz "https://update.code.visualstudio.com/latest/linux-x64/insider"
              tar -xzf vscode-insiders.tar.gz -C ~/.vscode-insiders --strip-components=1
            elif [ "${{ runner.os }}" == "macOS" ]; then
              wget -O vscode-insiders.zip "https://update.code.visualstudio.com/latest/darwin-universal/insider"
              unzip vscode-insiders.zip -d ~/.vscode-insiders
            else
              echo "Windows setup not implemented in this script"
              exit 1
            fi

      - name: Create development container
        run: |
          if [ -f .devcontainer/devcontainer.json ]; then
            mkdir -p .logs
            # Setup devcontainer
            bash ./.devcontainer/scripts/initialize.sh 2>&1 | tee .logs/setup-$(date +%Y%m%d%H%M%S).log
          else
            echo "No devcontainer configuration found"
          fi

      - name: Configure local development settings
        run: |
          mkdir -p .vscode
          cat > .vscode/settings.json << EOF
          {
            "editor.formatOnSave": true,
            "editor.codeActionsOnSave": {
              "source.fixAll": true,
              "source.organizeImports": true
            },
            "files.autoSave": "afterDelay",
            "typescript.tsdk": "node_modules/typescript/lib",
            "remote.extensionKind": {
              "ms-azuretools.vscode-docker": ["workspace"],
              "ms-vscode-remote.remote-containers": ["ui"]
            },
            "debug.javascript.usePreview": true,
            "debug.javascript.autoAttachFilter": "smart",
            "debug.javascript.terminalOptions": {
              "skipFiles": ["<node_internals>/**"]
            },
            "vscode-insiders.environment": "${{ github.event.inputs.environment }}",
            "vscode-insiders.debugMode": ${{ github.event.inputs.debugMode }}
          }
          EOF

      - name: Set up launch configuration
        run: |
          mkdir -p .vscode
          cat > .vscode/launch.json << EOF
          {
            "version": "0.2.0",
            "configurations": [
              {
                "name": "Run Extension",
                "type": "extensionHost",
                "request": "launch",
                "args": [
                  "--extensionDevelopmentPath=\${workspaceFolder}"
                ],
                "outFiles": [
                  "\${workspaceFolder}/dist/**/*.js"
                ],
                "preLaunchTask": "npm: webpack"
              },
              {
                "name": "Extension Tests",
                "type": "extensionHost",
                "request": "launch",
                "args": [
                  "--extensionDevelopmentPath=\${workspaceFolder}",
                  "--extensionTestsPath=\${workspaceFolder}/out/test/suite/index"
                ],
                "outFiles": [
                  "\${workspaceFolder}/out/test/**/*.js"
                ],
                "preLaunchTask": "npm: test-compile"
              },
              {
                "name": "Debug Agent",
                "type": "node",
                "request": "launch",
                "program": "\${workspaceFolder}/agent/dist/index.js",
                "cwd": "\${workspaceFolder}/agent",
                "outFiles": [
                  "\${workspaceFolder}/agent/dist/**/*.js"
                ],
                "env": {
                  "NODE_ENV": "${{ github.event.inputs.environment }}",
                  "DEBUG": "${{ github.event.inputs.debugMode == 'true' && '*' || '' }}"
                },
                "preLaunchTask": "npm: build-agent"
              }
            ]
          }
          EOF

      - name: Create tasks configuration
        run: |
          mkdir -p .vscode
          cat > .vscode/tasks.json << EOF
          {
            "version": "2.0.0",
            "tasks": [
              {
                "type": "npm",
                "script": "webpack",
                "problemMatcher": "$tsc-watch",
                "isBackground": true,
                "presentation": {
                  "reveal": "never"
                },
                "group": {
                  "kind": "build",
                  "isDefault": true
                }
              },
              {
                "type": "npm",
                "script": "test-compile",
                "group": "build",
                "problemMatcher": "$tsc"
              },
              {
                "type": "npm",
                "script": "build-agent",
                "path": "agent/",
                "group": "build",
                "problemMatcher": "$tsc"
              },
              {
                "label": "Start Dev Environment",
                "dependsOn": [
                  "npm: webpack",
                  "npm: build-agent"
                ],
                "problemMatcher": []
              }
            ]
          }
          EOF

      - name: Generate local development certificates
        if: github.event.inputs.environment == 'dev'
        run: |
          mkdir -p .devcontainer/certs
          openssl req -x509 -newkey rsa:4096 -keyout .devcontainer/certs/dev-key.pem -out .devcontainer/certs/dev-cert.pem -days 365 -nodes -subj "/CN=localhost" 2>&1 | tee .logs/certs-$(date +%Y%m%d%H%M%S).log

      - name: Create development environment summary
        run: |
          cat > environment-summary.md << EOF
          # Development Environment Setup Summary

          ## Environment: ${{ github.event.inputs.environment }}
          Debug Mode: ${{ github.event.inputs.debugMode }}

          ## VS Code Insiders Configuration
          - Extensions installed and configured
          - Development container prepared
          - Launch configurations created
          - Tasks configured for rapid development

          ## Next Steps
          1. Open VS Code Insiders in this workspace
          2. Run the "Start Dev Environment" task
          3. Begin development with full debugging support

          ## Paths to Important Files
          - VS Code settings: .vscode/settings.json
          - Launch configurations: .vscode/launch.json
          - Task definitions: .vscode/tasks.json
          - Dev container config: .devcontainer/devcontainer.json

          ## Agent Development
          The agent is configured and ready for local development.
          Use the "Debug Agent" launch configuration to test with full debugging support.
          EOF

      - name: Upload environment summary
        uses: actions/upload-artifact@v3
        with:
          name: environment-setup-summary
          path: environment-summary.md
